<DMSScript options="272" xmlns="http://www.skyline.be/automation">
	<Name>Install</Name>
	<Description />
	<Type>Automation</Type>
	<Author>SKYLINE2\RepoManager</Author>
	<CheckSets>FALSE</CheckSets>
	<Folder />
	<Protocols></Protocols>
	<Memory></Memory>
	<Parameters></Parameters>
	<Script>
		<Exe id="1" type="csharp">
			<Value>
				<![CDATA[/*
****************************************************************************
*  Copyright (c) 2021,  Skyline Communications NV  All Rights Reserved.    *
****************************************************************************

By using this script, you expressly agree with the usage terms and
conditions set out below.
This script and all related materials are protected by copyrights and
other intellectual property rights that exclusively belong
to Skyline Communications.

A user license granted for this script is strictly for personal use only.
This script may not be used in any way by anyone without the prior
written consent of Skyline Communications. Any sublicensing of this
script is forbidden.

Any modifications to this script by the user are only allowed for
personal use and within the intended purpose of the script,
and will remain the sole responsibility of the user.
Skyline Communications will not be responsible for any damages or
malfunctions whatsoever of the script resulting from a modification
or adaptation by the user.

The content of this script is confidential information.
The user hereby agrees to keep this confidential information strictly
secret and confidential and not to disclose or reveal it, in whole
or in part, directly or indirectly to any person, entity, organization
or administration without the prior written consent of
Skyline Communications.

Any inquiries can be addressed to:

	Skyline Communications NV
	Ambachtenstraat 33
	B-8870 Izegem
	Belgium
	Tel.	: +32 51 31 35 69
	Fax.	: +32 51 31 01 29
	E-mail	: info@skyline.be
	Web		: www.skyline.be
	Contact	: Ben Vandenberghe

****************************************************************************
Revision History:

DATE		VERSION		AUTHOR			COMMENTS

dd/mm/2021	1.0.0.1		XXX, Skyline	Initial version
****************************************************************************
*/

using System;
using Install_1.LCA;
using Skyline.AppInstaller;
using Skyline.DataMiner.Automation;
using Skyline.DataMiner.Net.AppPackages;

//---------------------------------
// Install_1.cs
//---------------------------------

/// <summary>
///     DataMiner Script Class.
/// </summary>
internal class Script
{
	/// <summary>
	///     The script entry point.
	/// </summary>
	/// <param name="engine">Provides access to the Automation engine.</param>
	/// <param name="context">Provides access to the installation context.</param>
	[AutomationEntryPoint(AutomationEntryPointType.Types.InstallAppPackage)]
	public void Install(Engine engine, AppInstallContext context)
	{
		try
		{
			engine.Timeout = new TimeSpan(0, 10, 0);
			engine.GenerateInformation("Starting installation");
			var installer = new AppInstaller(Engine.SLNetRaw, context);
			installer.InstallDefaultContent();

			// Custom installation logic can be added here for each individual install package.
			LcaInstaller lcaInstaller = new LcaInstaller(context, installer.Log);
			lcaInstaller.InstallDefaultContent();
		}
		catch (Exception e)
		{
			engine.ExitFail("Exception encountered during installation: " + e);
		}
	}
}
//---------------------------------
// LCA\LcaInstaller.cs
//---------------------------------
namespace Install_1.LCA
{
	using System;
	using System.IO;
	using System.Linq;
	using Skyline.DataMiner.Net.AppPackages;

	// Summary:
	//     Initiates a new instance.
	//
	// Parameters:
	//   connection:
	//     SLNet raw connection. Can be obtained via Engine object.
	//
	//   context:
	//     Provides the context to which the installer has access to. Skyline.DataMiner.Net.AppPackages.AppInstallContext
	//     object is automatically provided by the Automation script.
	public class LcaInstaller
	{
		private const string LCA_FOLDERPATH = @"CompanionFiles\LCA";
		private const string ApplicationsDirectory = @"C:\Skyline DataMiner\applications";

		private readonly AppInstallContext context;
		private readonly Action<string> logMethod;

		public LcaInstaller(AppInstallContext context, Action<string> logMethod)
		{
			// Null checks still required / valid input data check
			this.context = context;
			this.logMethod = logMethod;
		}

		// Summary:
		//     Installs all provided low code apps
		//     in the AppContent of the package on the DMS.
		public void InstallDefaultContent()
		{
			Log("Low Code App Installation");

			var apps = Directory.GetDirectories(context.AppContentPath + LCA_FOLDERPATH);
			var existingApps = Directory.GetDirectories(ApplicationsDirectory).Select(dir => Path.GetFileName(dir));
			foreach (var app in apps)
			{
				if(existingApps.Contains(Path.GetFileName(app)))
				{
					// Generate a new GUID for the app
					var oldId = Path.GetFileName(app);
					var newId = Guid.NewGuid().ToString();
					var destPath = Path.Combine(ApplicationsDirectory, newId);
					CopyFolder(app, destPath);
					foreach(var versionPath in Directory.GetDirectories(destPath))
					{
						var configPath = Path.Combine(versionPath, "App.config.json");
						var file = File.ReadAllText(configPath);
						File.WriteAllText(configPath, file.Replace(oldId, newId));
					}
				}
				else
				{
					CopyFolder(app, Path.Combine(ApplicationsDirectory, Path.GetFileName(app)));
				}
			}
		}

		public static void CopyFolder(string sourceFolderPath, string destinationFolderPath)
		{
			DirectoryInfo sourceDir = new DirectoryInfo(sourceFolderPath);

			// If the destination folder doesn't exist, create it
			if (!Directory.Exists(destinationFolderPath))
			{
				Directory.CreateDirectory(destinationFolderPath);
			}

			// Copy files in the current directory
			foreach (FileInfo file in sourceDir.GetFiles())
			{
				string destFile = Path.Combine(destinationFolderPath, file.Name);
				file.CopyTo(destFile, false);
			}

			// Recursively copy subdirectories
			foreach (DirectoryInfo subdir in sourceDir.GetDirectories())
			{
				string destSubdir = Path.Combine(destinationFolderPath, subdir.Name);
				CopyFolder(subdir.FullName, destSubdir);
			}
		}

		// Summary:
		//     Logs the provided message into the logfile "C:\Skyline DataMiner\Logging\SLAppPackageInstaller.txt".
		//     The message will also be shown during installation with the DataMiner Application
		//     Package Installer from the Skyline TaskBar Utility.
		//
		// Parameters:
		//   message:
		//     A message you want to log or show during installation.
		public void Log(string message)
		{
			logMethod(message);
		}
	}
}
]]>
			</Value>
			<!--<Param type="debug">true</Param>-->
			<Message />
			<Param type="ref">System.Transactions.dll</Param>
			<Param type="ref">System.IO.Compression.FileSystem.dll</Param>
			<Param type="ref">AlphaFS.dll</Param>
			<Param type="ref">System.IO.Compression.ZipFile.dll</Param>
			<Param type="ref">Skyline.DataMiner.Core.AppPackageInstaller.dll</Param>
		</Exe>
	</Script>
</DMSScript>